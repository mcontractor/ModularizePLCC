# list operations

LENOP 'len'
LISTP 'list\?'
FIRSTOP 'first'
RESTOP 'rest'
ADDFIRSTOP 'addFirst'
LBRACK '\['
RBRACK '\]'

%
<exp>:ListExp    ::= LBRACK <operands> RBRACK
<prim>:ListpPrim ::= LISTP
<prim>:LenPrim   ::= LENOP
<prim>:FirstPrim ::= FIRSTOP
<prim>:RestPrim  ::= RESTOP
<prim>:AddFirstPrim  ::= ADDFIRSTOP
%

ListpPrim
%%%
    public Val apply(Val [] va) {
	if (va.length != 1)
	    throw new PLCCException("one argument expected");
        Val v0 = va[0];
	return new IntVal(v0.isList() ? 1 : 0);
    }
%%%

FirstPrim
%%%
    public Val apply(Val [] va) {
        if (va.length != 1)
            throw new PLCCException("one argument expected");
        ListNode lst = va[0].listNode();
        return lst.val;
    }
%%%

RestPrim
%%%
    public Val apply(Val [] va) {
        if (va.length != 1)
            throw new PLCCException("one argument expected");
        ListNode lst = va[0].listNode();
        return lst.listVal;
    }
%%%

AddFirstPrim
%%%
    public Val apply(Val [] va) {
        if (va.length != 2)
            throw new PLCCException("two arguments expected");
        Val v = va[0];
        ListVal lst = va[1].listVal();
        return new ListNode(v, lst);
    }
%%%

LenPrim
%%%
    public Val apply(Val [] va) {
        if (va.length != 1)
            throw new PLCCException("one argument expected");
        ListVal lst = va[0].listVal();
        return new IntVal(lst.len());
    }

%%%

ListExp
%%%
    public Val eval(Env env) {
        List<Val> valList = rands.evalRands(env);
        ListVal listVal = Val.listNull;
        int n = valList.size();
        // process the elements in reverse order
        while (n > 0)
            listVal = new ListNode(valList.get(--n), listVal);
        return listVal;
    }

    public String toString() {
        return " ...ListExp... ";
    }
%%%
