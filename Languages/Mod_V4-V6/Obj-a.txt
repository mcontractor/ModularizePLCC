
OBJECTP 'object\?'
CLASSP 'class\?'
CLASS 'class'
EXTENDS 'extends'
STATIC 'static'
FIELD 'field'
METHOD 'method'
END 'end'
WITH 'with'
EVAL 'eval'
NEW 'new'
SEND 'send'
NIL 'nil'
DISPLAY 'display'
DISPLAY1 'display#'
NEWLINE 'newline'
PUTC 'putc'
ERROR 'error'
PERROR 'perror'
AT '@'
ATAT '@@'
LANGLE '<'
RANGLE '>'
LLANGLE '!<'
RRANGLE '!>'
BANGAT '!@'
STRNG '\"(\\.|[^\"\\])*\"'
EXIT 'exit'
EQUALS '='
LET 'let'
IN 'in'
LETREC 'letrec'
DEFINE 'define'
SET 'set'

%
<program>:Define ::= DEFINE <VAR> EQUALS <exp>
<exp>:LetExp     ::= LET <letDecls> IN <exp>
<exp>:LetrecExp  ::= LETREC <letrecDecls> IN <exp>
<letDecls>       **= <VAR> ASSIGN <exp>
<letrecDecls>    **= <VAR> ASSIGN <exp>
<exp>:ExitExp    ::= EXIT
<exp>:ChrExp     ::= <CHR>
<exp>:StrngExp   ::= <STRNG>
<exp>:ClassExp   ::= <classDecl>
<exp>:NilExp     ::= NIL
<exp>:NewExp     ::= NEW <exp>
<exp>:EnvExp     ::= LANGLE <exp>vExp RANGLE <exp>eExp
<exp>:BangAtExp  ::= BANGAT
# send obj msg(rands) is the same as .<obj>msg(rands)
<exp>:SendExp    ::= SEND <exp>objExp <exp>procExp LPAREN <operands> RPAREN
# with obj eval exp is the same as <obj>exp
<exp>:WithExp    ::= WITH <exp>vExp EVAL <exp>eExp
<exp>:AtExp      ::= AT
<exp>:AtAtExp    ::= ATAT
<exp>:DisplayExp ::= DISPLAY <exp>
<exp>:Display1Exp  ::= DISPLAY1 <exp>
<exp>:NewlineExp ::= NEWLINE
<exp>:SetExp     ::= SET <loc> <VAR> EQUALS <exp>
<exp>:PutcExp    ::= PUTC <exp>
# !<obj>msg1(rands1)>msg2(rands2)>msg3(rands3)...!>
# is the same as .<.<.<obj>msg1(rands1)>msg2(rands2)>msg3(rands3) ...
<exp>:EenvExp    ::= LLANGLE <exp> <mangle> RRANGLE
<exp>:ErrorExp   ::= ERROR <exp>
<exp>:PerrorExp  ::= PERROR <STRNG>
<classDecl>      ::= CLASS <ext> <statics> <fields> <methods> END
<mangle>         **= RANGLE <exp> LPAREN <operands> RPAREN
<ext>:Ext1       ::= EXTENDS <exp>
<ext>:Ext0       ::=
<loc>:ObjLoc     ::= LANGLE <exp> RANGLE
<loc>:SimpleLoc  ::=
<statics>        **= STATIC <VAR> EQUALS <exp>
<fields>         **= FIELD <VAR>
<methods>        **= METHOD <VAR> EQUALS <proc>
<prim>:ObjectpPrim   ::= OBJECTP
<prim>:ClasspPrim    ::= CLASSP
%

ObjectpPrim
%%%
    public Val apply(Val [] va) {
	if (va.length != 1)
            throw new PLCCException("one argument expected");
        Val v0 = va[0];
        return new IntVal(v0.isObject() ? 1 : 0);
   }
%%%

ClasspPrim
%%%
    public Val apply(Val [] va) {
	if (va.length != 1)
            throw new PLCCException("one argument expected");
        Val v0 = va[0];
        return new IntVal(v0.isClass() ? 1 : 0);
   }
%%%

Program:class
%%%
implements IProgram
%%%

Program
%%%
    public static Env initEnv = Env.initAndSaveEnv();

%%%

Define
%%%
    // notice that calling toString triggers a modification
    // of the initial environment
    public String toString() {
        String id = var.toString();
        Env env = Env.getEnv();
        Val val = exp.eval(env);
        Ref ref = new ValRef(val);
        Binding b = env.lookup(id);
        if (b != null)
            b.ref = ref;
        else
            env.add(new Binding(id, ref));
        return id;
    }
%%%

Eval
%%%
    public String toString() {
        return exp.eval(Env.getEnv()).toString();
    }
%%%

ExitExp
%%%
    public Val eval(Env env) {
        throw new PLCCException("...exiting...");
    }
%%%

ChrExp
%%%
    public Val eval(Env env) {
        return new IntVal(chr.toString().charAt(1));
    }

    public String toString() {
        return chr.toString();
    }
%%%

StrngExp
%%%
    public Val eval(Env env) {
        String s = strng.toString();
        int len = s.length()-1;
        LinkedList<Character> chars = new LinkedList<Character>();
        // We know that s.charAt(0) is '"'
        // and that s.charAt(len) is '"'
        int pos = 1;
        while (pos < len) {
            char c = s.charAt(pos++);
            if (c == '\\') {
                // escape!
                c = s.charAt(pos++);
                switch(c) {
                case 'a' : c = 7; break;
                case 'b' : c = 8;  break;
                case 't' : c = 9;  break;
                case 'n' : c = 10; break;
                case 'f' : c = 12; break;
                case 'r' : c = 13; break;
                default  : break;
                }
            }
            chars.add(0, c); // add to beginning of list
        }
        // chars is in reverse order -- now build a ListVal in proper order
        ListVal lst = Val.listNull;
        for (Character c : chars) {
            lst = lst.add(new IntVal(c));
        }
        return lst;
    }

    public String toString() {
        return strng.toString();
    }
%%%

ClassExp
%%%
    public Val eval(Env env) {
        return classDecl.eval(env);
    }

%%%

ClassDecl
%%%
    public Val eval(Env env) {
        ClassVal superClass = ext.toClassVal(env);
        return new StdClass(env, superClass, statics, fields, methods);
    }
%%%

Statics:class
%%%
implements IStatics
%%%
Statics
%%%
    // Add new bindings to the static bindings -- behaves like top-level
    // defines.
    public void addStaticBindings(Env env) {
        Iterator<Token> varIter = varList.iterator(); // LHS identifiers
        Iterator<Exp> expIter = expList.iterator();    // RHS expressions
        while(varIter.hasNext()) {
            Token var = varIter.next();
            String id = var.toString(); // the LHS identifier
            Exp exp = expIter.next();    // the RHS expression
            Val val = exp.eval(env);
            Ref ref = new ValRef(val);
            Binding b = env.lookup(id);
            if (b != null)
                b.ref = ref;
            else
                env.add(new Binding(id, ref));
        }
    }
%%%

NewExp
%%%
    public Val eval(Env env) {
        // get the class from which this object will be created
        Val val = exp.eval(env);
        // create a reference to a dummy value (nil)
        Ref objRef = new ValRef(Val.nil);
        // let the class create the object
        ObjectVal objectVal = val.makeObject(objRef);
        // set the reference to the newly created object
        return objRef.setRef(objectVal);
    }
%%%

Loc
%%%
    public abstract Env getEnv(Env env);
%%%

ObjLoc
%%%
    public Env getEnv(Env env) {
        Val v = exp.eval(env);
        return v.env();
    }
%%%

SimpleLoc
%%%
    public Env getEnv(Env env) {
        return env;
    }
%%%

EnvExp
%%%
    public Val eval(Env env) {
        Val v = vExp.eval(env);
        return eExp.eval(v.env());
    }

%%%

EenvExp
%%%
    public Val eval(Env env) {
        Val v = exp.eval(env);      // the environment object
        return mangle.eval(v, env);
    }
%%%

BangAtExp
%%%
    public Val eval(Env env) {
        return env.applyEnv("!@");
    }
%%%

Mangle
%%%
    public Val eval(Val v, Env env) {
        Iterator<Exp> expIter = expList.iterator();
        Iterator<Rands> randsIter = randsList.iterator();
        while (expIter.hasNext()) {
            // expIter.next() ProcExp to apply
            // randsIter.next() are the method rands -- evaluated in env
            // v.env() is the environment in which to build the ProcVal
            Val p = expIter.next().eval(v.env());
            List<Val> valList = randsIter.next().evalRands(env);
            v = p.apply(valList);
        }
        return v;
    }
%%%

WithExp
%%%
    public Val eval(Env env) {
        return new EnvExp(vExp, eExp).eval(env);
    }
%%%


NilExp
%%%
    public Val eval(Env env) {
        return Val.nil;
    }

%%%

SendExp
%%%

    public Val eval(Env env) {
        Val v = objExp.eval(env);
        Val p = procExp.eval(v.env()); // in the object env
        List<Val> valList = rands.evalRands(env); // in calling env
        return p.apply(valList);
    }

    public String toString() {
        return " ...SendExp... ";
    }

%%%

AtExp
%%%
    public Val eval(Env env) {
        return new ObjectVal(env);
    }

%%%

AtAtExp
%%%
    public Val eval(Env env) {
        System.out.println(env.toString(0));
        return new ObjectVal(env);
    }
%%%


DisplayExp
%%%
    public Val eval(Env env) {
        Val v = exp.eval(env);
        System.out.print(v);
        return v;
    }

%%%

Display1Exp
%%%
    public Val eval(Env env) {
        Val v = exp.eval(env);
        System.out.print(v+" ");
        return v;
    }

%%%

NewlineExp
%%%
    public Val eval(Env env) {
        System.out.println();
        return Val.nil;
    }

%%%

PutcExp
%%%
    public Val eval(Env env) {
        Val v = exp.eval(env);
        System.out.print(v.putc());
        return Val.nil;
    }
%%%

ErrorExp
%%%
    public Val eval(Env env) {
        Val val = exp.eval(env);
        throw new PLCCException("error: " + val);
    }
%%%

PerrorExp
%%%
    public Val eval(Env env) {
        String str = strng.toString();
        int len = str.length();
        str = str.substring(1,len-1);
        throw new PLCCException("error: " + str);
    }
%%%

Ext
%%%
    public abstract ClassVal toClassVal(Env env);
%%%

Ext0
%%%

    public ClassVal toClassVal(Env env) {
        return EnvClass.envClass; // a singleton
    }

%%%

Ext1
%%%
    public ClassVal toClassVal(Env env) {
        Val v = exp.eval(env);
        return v.classVal();
    }
%%%

Methods:class
%%%
implements IMethods
%%%
Methods
%%%
    public Env addMethodBindings(Env env) {
        if (varList.size() == 0)
        return env;
        List<Exp> expList = new ArrayList<Exp>();
        for (Proc p: procList)
        expList.add(new ProcExp(p));
        return new LetDecls(varList, expList).addLetrecBindings(env);
    }
%%%

Fields:class
%%%
implements IFields
%%%
Fields
%%%
    public void addFieldBindings(Bindings fieldBindings) {
        for (Token t: varList) {
        String s = t.toString();
        fieldBindings.add(s, new ValRef(Val.nil));
        }
    }
%%%

LetExp
%%%
    public Val eval( Env env ) {
        Env newEnv = letDecls.makeEnv( env );
        return exp.eval( newEnv );
    }

%%%

LetDecls:import
%%%
import java.util.LinkedList;
import java.util.List;
import java.util.Iterator;
%%%


LetDecls
%%%
    public Env makeEnv( Env oldEnv ) {
        assert varList.size() == expList.size(): "AST is messed up";

        // For each var-exp pair, make a new Binding
        // out of the corresponding token "lexeme" and expr evaluation.
        
        List< Binding > bindings = new LinkedList<>();
        Iterator< Token > varIter = varList.iterator();
        Iterator< Exp > expIter = expList.iterator();
        while ( varIter.hasNext() ) {
            Binding binding = new Binding(
                varIter.next().str,
                new ValRef( expIter.next().eval( oldEnv ) )
                );
            bindings.add( binding );
        }

        // Make an environment out of the Bindings.
        return oldEnv.extendEnv( new Bindings( bindings ) );
    }


%%%

LetrecExp
%%%

    public Val eval( Env env ) {
        Env newEnv = letrecDecls.makeEnv( env );
        return exp.eval( newEnv );
    }

%%%



LetrecDecls:import
%%%
import java.util.LinkedList;
import java.util.List;
import java.util.Iterator;
%%%


LetrecDecls
%%%

    // <letDecls>       **= <VAR> ASSIGN <exp>

    public Env makeEnv( Env oldEnv ) {
        assert varList.size() == expList.size(): "AST is messed up";

        // Create an empty environment
        
        Env newEnv = oldEnv.extendEnv( new Bindings() ); // ! will go away

        // For each var-proc pair, make a new Binding
        // out of the corresponding token "lexeme" and expr evaluation.
        
        List< Binding > bindings = new LinkedList<>();
        Iterator< Token > varIter = varList.iterator();
        Iterator< Exp > expIter = expList.iterator();
        while ( varIter.hasNext() ) {
            String varName = varIter.next().str;
            Val procVal = expIter.next().eval( newEnv ); // !
            // ProcVal procVal = (ProcVal)expIter.next().eval( newEnv ); // !
            Binding binding = new Binding( varName, new ValRef( procVal ) );
            bindings.add( binding );
        }

        // Change the environment to add the Bindings.
        newEnv.replaceBindings( new Bindings( bindings ) ); // !
        return newEnv;
    }


%%%